// SPDX-License-Identifier: MIT
pragma solidity 0.8.25;

contract StorageDemo {
    bool private value_bool_single = true; //slot0=>0x0000000000000000000000000000000000000000000000000000000000000001
    uint256 private value_uint_256_a = 2; //slot1=>0x0000000000000000000000000000000000000000000000000000000000000002

    uint8 private value_uint_8_single = 3; //slot2=>0x0000000000000000000000000000000000000000000000000000000000000003
    uint256 private value_uint_256_c = 4; //slot3=>0x0000000000000000000000000000000000000000000000000000000000000004

    bytes12 private value_bytes_single = 0x746573740000000000000000; //slot4=>0x0000000000000000000000000000000000000000746573740000000000000000
    uint256 private value_uint_256_d = 5; //slot5=>0x0000000000000000000000000000000000000000000000000000000000000005

    address private value_address_single = 0xfc968Fbc5751Fb3863fc4764c0a66c76728e91eC; //slot6=>0x000000000000000000000000fc968fbc5751fb3863fc4764c0a66c76728e91ec
    uint256 private value_uint_256_b = 6; //slot7=>0x0000000000000000000000000000000000000000000000000000000000000006

    bytes32 private value_bytes32_a = 0x7465737400000000000000000000000000000000000000000000000000000000;
    //slot8=>0x7465737400000000000000000000000000000000000000000000000000000000

    uint8 private value_uint_8_a = 7; //slot9
    address private value_address_a = 0xfc968Fbc5751Fb3863fc4764c0a66c76728e91eC; //slot9
    uint8 private value_uint_8 = 8; //slot9
    //slot9=>0x0000000000000000000008fc968fbc5751fb3863fc4764c0a66c76728e91ec07

    uint88 private value_uint_88 = 9; //slot10
    address private value_address_b = 0xfc968Fbc5751Fb3863fc4764c0a66c76728e91eC; //slot10
    //slot10=>0x00fc968fbc5751fb3863fc4764c0a66c76728e91ec0000000000000000000009

    bytes12 private value_bytes12 = 0x746573740000000000000000; //slot11
    address private value_address_c = 0xfc968Fbc5751Fb3863fc4764c0a66c76728e91eC; //slot11
    //slot11=>0xfc968fbc5751fb3863fc4764c0a66c76728e91ec746573740000000000000000

    bool private value_bool = true; //slot12
    uint8 private value_uint_16_a = 10; //slot12
    address private value_address_d = 0xfc968Fbc5751Fb3863fc4764c0a66c76728e91eC; //slot12
    uint16 private value_uint_16_b = 11; //slot12
    //slot12=>0x0000000000000000000bfc968fbc5751fb3863fc4764c0a66c76728e91ec0a01

    uint80 private value_uint_80 = 12; //slot13
    address private value_address_e = 0xfc968Fbc5751Fb3863fc4764c0a66c76728e91eC; //slot13
    //slot13=>0x0000fc968fbc5751fb3863fc4764c0a66c76728e91ec0000000000000000000c

    //特殊数组
    bytes constant a = hex"0a";
    bytes constant b = hex"123456";
    bytes[2] private reference_bytes_array_fixed_length = [a, b];
    //slot14=>0x0a00000000000000000000000000000000000000000000000000000000000002（值000000长度）
    //slot15=>0x1234560000000000000000000000000000000000000000000000000000000006

    bytes8[2] private reference_bytes8_array_fixed_length = [bytes8(0x1234123412341234), bytes8(0x7890789078907890)];
    //slot16=>0x0000000000000000000000000000000078907890789078901234123412341234

    uint256[2] private reference_uint256_array_fixed_length = [uint256(1), uint256(2)];
    //slot17=>0x0000000000000000000000000000000000000000000000000000000000000001
    //slot18=>0x0000000000000000000000000000000000000000000000000000000000000002

    uint8[2] private reference_uint8_array_fixed_length = [uint8(1), uint8(2)];
    //slot19=>0x0000000000000000000000000000000000000000000000000000000000000201

    address[2] private reference_address_array_fixed_length = [0xfc968Fbc5751Fb3863fc4764c0a66c76728e91eC, 0x714F6eA9909D934f02448EDd2D89deA8c3Bc83f9];
    //slot20=>0x000000000000000000000000fc968fbc5751fb3863fc4764c0a66c76728e91ec
    //slot21=>0x000000000000000000000000714f6ea9909d934f02448edd2d89dea8c3bc83f9

    bool[2] private reference_bool_array_fixed_length = [true, true];
    //slot22=>0x0000000000000000000000000000000000000000000000000000000000000101

    bytes private reference_bytes_a = a;
    //slot23=>0x0a00000000000000000000000000000000000000000000000000000000000002
    bytes private reference_bytes_b = b;
    //slot24=>0x1234560000000000000000000000000000000000000000000000000000000006

    string private reference_string_length_less31 = "1234567890abcdefghijklmnopqrstu"; //length<31  //slot15(value + length*2)
    //slot25=>0x313233343536373839306162636465666768696a6b6c6d6e6f7071727374753e

    string private reference_string_length_greater31 = "1234567890abcdefghijklmnopqrstuvwxyz"; //length>31 //slot16(length*2+1)=>keccak256(16) 0&1
    //slot26=>0x0000000000000000000000000000000000000000000000000000000000000049
    //keccak256(26)=0x057c384a7d1c54f3a1b2e5e67b2617b8224fdfd1ea7234eea573a6ff665ff63e
    //keccak256(26))+1=0x057c384a7d1c54f3a1b2e5e67b2617b8224fdfd1ea7234eea573a6ff665ff63f
    //slot(keccak256(26))=>0x313233343536373839306162636465666768696a6b6c6d6e6f70717273747576
    //slot(keccak256(26)+1)=>0x7778797a00000000000000000000000000000000000000000000000000000000
    //0x313233343536373839306162636465666768696a6b6c6d6e6f707172737475767778797a=>1234567890abcdefghijklmnopqrstuvwxyz

    string[] private reference_string_array = ["1234567890abcdefghijklmnopqrstu", "1234567890abcdefghijklmnopqrstuvwxyz"];
    //slot27=>0x0000000000000000000000000000000000000000000000000000000000000002
    //keccak256(27)=0x3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc1
    //keccak256(27))+1=0x3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc2
    //slot(keccak256(27))=>0x313233343536373839306162636465666768696a6b6c6d6e6f7071727374753e

    //slot(keccak256(27))=>0x0000000000000000000000000000000000000000000000000000000000000049
    //keccak256(keccak256(27)+1)=0xd8c82f6eaf1ec8eff6ee2bd6b1a0b0bb2ab931ba5267cbd86c20fa471213f641
    //keccak256(keccak256(27)+1)+1=0xd8c82f6eaf1ec8eff6ee2bd6b1a0b0bb2ab931ba5267cbd86c20fa471213f642
    //slot(keccak256(keccak256(27)+1))=>0x313233343536373839306162636465666768696a6b6c6d6e6f70717273747576
    //slot(keccak256(keccak256(27)+1)+1)=>0x7778797a00000000000000000000000000000000000000000000000000000000

    bytes[] private reference_bytes_array = [a, b];
    //slot28=>0x0000000000000000000000000000000000000000000000000000000000000002
    //keccak256(28)=0x0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a211
    //keccak256(28))+1=0x0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a212
    //slot(keccak256(28))=>0x0a00000000000000000000000000000000000000000000000000000000000002
    //slot(keccak256(28)+1)=>0x0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a212

    bytes8[] private reference_bytes8_array = [bytes8(0x1234123412341234), bytes8(0x6789678967896789)];
    //slot29=>0x0000000000000000000000000000000000000000000000000000000000000002
    //keccak256(29)=0x6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f
    //slot(keccak256(29))=>0x0000000000000000000000000000000067896789678967891234123412341234

    uint256[] private reference_uint256_array = [uint256(1), uint256(2)];
    //slot30=>0x0000000000000000000000000000000000000000000000000000000000000002
    //keccak256(30)=0x50bb669a95c7b50b7e8a6f09454034b2b14cf2b85c730dca9a539ca82cb6e350
    //keccak256(30))+1=0x50bb669a95c7b50b7e8a6f09454034b2b14cf2b85c730dca9a539ca82cb6e351
    //slot(keccak256(30))=>0x0000000000000000000000000000000000000000000000000000000000000001
    //slot(keccak256(30)+1)=>0x0000000000000000000000000000000000000000000000000000000000000002

    uint8[] private reference_uint8_array = [uint8(1), uint8(2)];
    //slot31=>0x0000000000000000000000000000000000000000000000000000000000000002
    //keccak256(31)=0xa03837a25210ee280c2113ff4b77ca23440b19d4866cca721c801278fd08d807
    //slot(keccak256(31))=>0x0000000000000000000000000000000000000000000000000000000000000201

    address[] private reference_address_array = [0xfc968Fbc5751Fb3863fc4764c0a66c76728e91eC, 0x714F6eA9909D934f02448EDd2D89deA8c3Bc83f9];
    //slot32=>0x0000000000000000000000000000000000000000000000000000000000000002
    //keccak256(32)=0xc97bfaf2f8ee708c303a06d134f5ecd8389ae0432af62dc132a24118292866bb
    //keccak256(32))+1=0xc97bfaf2f8ee708c303a06d134f5ecd8389ae0432af62dc132a24118292866bc
    //slot(keccak256(32))=>0x000000000000000000000000fc968fbc5751fb3863fc4764c0a66c76728e91ec
    //slot(keccak256(32)+1)=>0x000000000000000000000000714f6ea9909d934f02448edd2d89dea8c3bc83f9

    bool[] private reference_bool_array = [true, true];
    //slot33=>0x0000000000000000000000000000000000000000000000000000000000000002
    //keccak256(33)=0x3a6357012c1a3ae0a17d304c9920310382d968ebcc4b1771f41c6b304205b570
    //slot(keccak256(33))=>0x0000000000000000000000000000000000000000000000000000000000000101

    User userInfo = User(0xfc968Fbc5751Fb3863fc4764c0a66c76728e91eC, 18);
    //slot34=0x000000000000000000000012fc968fbc5751fb3863fc4764c0a66c76728e91ec

    mapping(uint256 => User) private reference_struct_array;
    //slot35=>0x0000000000000000000000000000000000000000000000000000000000000000
    //keccak256(35,user)=0xb361aea33a0348d043deace4a562cb920ac10508397ad80f12dfe9a2a063e047
    //slot(keccak256(35,user))=>0x000000000000000000000012fc968fbc5751fb3863fc4764c0a66c76728e91ec

    mapping(string => User) private reference_struct_array_string_key;
    //slot36=>0x0000000000000000000000000000000000000000000000000000000000000000
    //keccak256(36,user)=0x45e17ef19e3c87e27ea46084b8be76e651a587f06513a210d64b63d477d03902
    //slot(keccak256(36,user))=>0x000000000000000000000012714f6ea9909d934f02448edd2d89dea8c3bc83f9

    bytes constant c = hex"12345678911234567891123456789112345678911234567891123456789112345678911234567891123456789112345678911234567891";
    bytes private reference_bytes_c = c;
    //slot37=>0x1234560000000000000000000000000000000000000000000000000000000006

    constructor() {
        reference_struct_array[1] = User(0xfc968Fbc5751Fb3863fc4764c0a66c76728e91eC, 18);
        reference_struct_array_string_key["user"] = User(0x714F6eA9909D934f02448EDd2D89deA8c3Bc83f9, 18);
    }

    struct User {
        address addr;
        uint8 age;
    }

    function readStorageNb(uint256 slotNb) public view returns (bytes32 result) {
        assembly {
            result := sload(slotNb)
        }
    }

    function kecReadStorageNbKey(uint256 slot) public view returns (bytes32 result) {
        bytes32 ss = keccak256(abi.encodePacked(slot));
        assembly {
            result := sload(ss)
        }
    }

    function slotKeccak256(uint256 slot) public pure returns (bytes32 result) {
        result = keccak256(abi.encodePacked(slot));
    }
    function slotKeyKeccak256(uint256 slot, uint256 key) public pure returns (bytes32 result) {
        result = keccak256(abi.encodePacked(key, slot));
    }

    function stringKeyKeccak256(uint256 slot, string memory key) public pure returns (bytes32 result) {
        result = keccak256(abi.encodePacked(key, slot));
    }

    function readMappingValue(uint256 baseSlot, uint256 key) public view returns (bytes32 value, bytes32 slot) {
        //bytes32 slot;
        assembly {
            // 计算映射槽：keccak256(key . baseSlot)
            mstore(0x0, key)
            mstore(0x20, baseSlot)
            slot := keccak256(0x0, 0x40)
            value := sload(slot)
        }
    }
}
